From 1a103661ed8f381d9c3a7dbdd94982bbb19a40db Mon Sep 17 00:00:00 2001
From: Timo Bruderek <timo.bruderek@gmx.de>
Date: Sun, 20 Jul 2014 20:43:23 +0200
Subject: [PATCH] Added calibration support for touch

---
 drivers/input/touchscreen/sun4i-ts.c | 51 +++++++++++++++++++++++++++++++++---
 1 file changed, 47 insertions(+), 4 deletions(-)

diff --git a/drivers/input/touchscreen/sun4i-ts.c b/drivers/input/touchscreen/sun4i-ts.c
index 39ec2f6..1726739 100644
--- a/drivers/input/touchscreen/sun4i-ts.c
+++ b/drivers/input/touchscreen/sun4i-ts.c
@@ -42,6 +42,8 @@
 #include <mach/system.h>
 #include <mach/hardware.h>
 #include <plat/sys_config.h>
+#include <linux/stat.h>
+#include <linux/moduleparam.h>
 
 #ifdef CONFIG_HAS_EARLYSUSPEND
     #include <linux/pm.h>
@@ -100,6 +102,10 @@
 #define TP_UP_PENDING          (1<<1)
 #define TP_DOWN_PENDING        (1<<0)
 
+#define OFFSET_X				(-100)
+#define OFFSET_Y				(100)
+
+
 struct sun4i_ts_data {
 	struct resource *res;
 	struct input_dev *input;
@@ -118,6 +124,36 @@ static int tp_press_threshold = 0; //usded to adjust sensitivity of touch
 static int tp_sensitive_level = 0; //used to adjust sensitivity of pen down detection
 static int tp_exchange_x_y = 0;
 
+// touch calibration support
+int scale_x = 1;
+int scale_y = 1;
+int offset_x = 0;
+int offset_y = 0;
+int min_x = 0;
+int max_x = 4095;
+int min_y = 0;
+int max_y = 4095;
+
+module_param(scale_x, int, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
+MODULE_PARM_DESC(scale_x, "X Scale divider");
+module_param(scale_y, int, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
+MODULE_PARM_DESC(scale_y, "Y Scale divider");
+
+module_param(offset_x, int, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
+MODULE_PARM_DESC(offset_x, "X Offset");
+module_param(offset_y, int, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
+MODULE_PARM_DESC(offset_y, "Y Offset");
+
+module_param(min_x, int, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
+MODULE_PARM_DESC(min_x, "X ABS MIN");
+module_param(max_x, int, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
+MODULE_PARM_DESC(max_x, "X ABS MAX");
+
+module_param(min_y, int, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
+MODULE_PARM_DESC(min_y, "Y ABS MIN");
+module_param(max_y, int, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
+MODULE_PARM_DESC(max_y, "Y ABS MAX");
+
 //停用设备
 #ifdef CONFIG_HAS_EARLYSUSPEND
 static void sun4i_ts_suspend(struct early_suspend *h)
@@ -218,8 +254,8 @@ static irqreturn_t sun4i_isr_tp(int irq, void *dev_id)
 		/* The 1st location reported after an up event is unreliable */
 		if (!ts_data->ignore_fifo_data) {
 			/* pr_err("motion: %dx%d\n", x, y); */
-			input_report_abs(ts_data->input, ABS_X, x);
-			input_report_abs(ts_data->input, ABS_Y, y);
+			input_report_abs(ts_data->input, ABS_X, ((x + offset_x)/scale_x));
+			input_report_abs(ts_data->input, ABS_Y, ((y + offset_y)/scale_y));
 			/*
 			 * The hardware has a separate down status bit, but
 			 * that gets set before we get the first location,
@@ -261,8 +297,8 @@ static struct sun4i_ts_data *sun4i_ts_data_alloc(struct platform_device *pdev)
 	ts_data->input->evbit[0] =  BIT(EV_SYN) | BIT(EV_KEY) | BIT(EV_ABS);
 	set_bit(BTN_TOUCH, ts_data->input->keybit);
 
-    input_set_abs_params(ts_data->input, ABS_X, 0, 4095, 0, 0);
-    input_set_abs_params(ts_data->input, ABS_Y, 0, 4095, 0, 0);
+    input_set_abs_params(ts_data->input, ABS_X, min_x, max_x, 0, 0);
+    input_set_abs_params(ts_data->input, ABS_Y, min_y, max_y, 0, 0);
 
 	ts_data->input->name = pdev->name;
 	ts_data->input->phys = "sun4i_ts/input0";
@@ -496,6 +532,13 @@ static int __init sun4i_ts_init(void)
 		goto script_parser_fetch_err;
 	}
 
+	//print values added to module load
+	
+	printk("sun4i-ts: Using following values: \n");
+	printk("sun4i-ts: x_min: %d, x_max: %d, y_min: %d, y_max: %d\n", min_x, max_x, min_y, max_y);
+	printk("sun4i-ts: x_offset: %d, y_offset: %d\n", offset_x, offset_y);
+	
+	
 	platform_device_register(&sun4i_ts_device);
 	ret = platform_driver_register(&sun4i_ts_driver);
 
-- 
1.9.1

